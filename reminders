// functions
function() {
}

const random = () => {
}
// end functions

// variables
 const // cant be changed
 var  // more global
 let  // less global
// end variables

// if else statements

if() {

} else if() {

} else{

}
// end if else statements

// ways to print to the console

console.log('random');

console.log(`hello ${whatever}`)
// end ways to print to the console

let hi = ['hallo];
console.log(hi[3]); // logs l to the console

let yeetExample = ['hallo', 'yeet', 'hi'];
yeetExample[0] = ('hillo'); // changes element 1 to hillo

const RandoExamp = ['idk', 'gtg'];
console.log(RandoExamp.length); // logs 2 to the console

const variable = ['hi', 'bye'];
variable.push('no', 'yes'); // adds these two elements to the array

const hi = ['do', 'not', 'fart'];
hi.pop() // gets rid of last element in the array.

// array methods
.shift() // removes the first item in an array
.unshift('...') // makes ... the first item in an array
.slice(1, 3) // gets rid of all of the items except the items 1-3
.splice(rando, random, 'this is added')
.join() // makes the array a sentence.
const random = randomArray.indexOf('random item in the array'); // when you log this tto the console it will log the array to the console and below it there will be the number of the item you chose in relationship to the array and where it is in it.
// If there isnâ€™t an element whose value matches that of the argument, -1 is returned.

const randomArray = ['n', 'p', 'g'];
function changeArray(Arr){
    Arr.pop();
};
changeArray(randomArray);

const numberClusters = [[1, 2], [3, 4], [5, 6]];
const target = numberClusters[2][1]; // this means it is six if it was [2][0] it would be five.
console.log(target); 

for (let rando = 5; rando < 11; rando ++) {
  console.log(rando); // logs 5 6 7 8 9 10 to the console
}

for (let counter = 3; counter >= 0; counter--){
  console.log(counter);
} // logs 3 2 1 0 to the console

const vacationSpots = ['Bali', 'Paris', 'Tulum'];
for (let i = 0; i < vacationSpots.length; i++){
  console.log('I would love to visit ' + vacationSpots[i]);
} // prints "I would love to visit Bali", "I would love to visit Paris", "I would love to visit Tulum"

// terminal reminders
ls // this makes a list of what folders and working directories you are in 
pwd // this prints current working directory
cd // this changes directory
cd .. // this changes directory to the previous one
cd. // this tells the comand line that you are in this directory
touch // this adds a file
mkdir // this adds a directory 
rm // (BE CAREFUL WITH THIS!) this removes a file
open // this opens a directory or a folders
nano // this lets you edit a folder in the terminal
rm -r // this removes a directory
clear // cleans your terminal but dos not delete anything
 
// nested loops
let bobsFollowers = ['Joe', 'Marta', 'Sam', 'Erin'];
let tinasFollowers = ['Sam', 'Marta', 'Elle'];
let mutualFollowers = [];

for (let i = 0; i < bobsFollowers.length; i++) {
  for (let j = 0; j < tinasFollowers.length; j++) {
    if (bobsFollowers[i] === tinasFollowers[j]) {
      mutualFollowers.push(bobsFollowers[i]);
    }
  }
};
// what this does it it calls three variables. then it calls both bobsFollowers' arguments and tinasFollowers' arguments. then is assaigns the arguments from both of them that are the same to the mutualFollowers variable 

const cards = ['diamond', 'spade', 'heart', 'club'];

the while loop is another loop. the syntax is described below. it is a better loop for looping things that you do not know the length of

let currentCard
while(currentCard != 'spade') {
  currentCard = cards[Math.floor(Math.random() * 4)];
  console.log(currentCard);
} // this assaigns a variable named currentCard. Inside the while loop it checks if the currentCard does not equal spade. if it doesnt it assaigns currentCard to cards[Math.floor(Math.random() * 4)]; the last thing that this block of code does is logs currentCard to the console.

do {

} // this is the syntax for a do loop.

let cupsOfSugarNeeded = 3;
let cupsAdded = 0;

do {
 cupsAdded++
} while (cupsAdded < cupsOfSugarNeeded); //this will automatically add 1 to cupsAdded and after that it will add the other 2.

const rapperArray = ["Lil' Kim", "Jay-Z", "Notorious B.I.G.", "Tupac"];
for (let i = 0; i < rapperArray.length; i++){
  console.log(rapperArray[i]);
  if (rapperArray[i] === 'Notorious B.I.G.'){
    break;
  }
} // logs everyones name except toupac to the console

the 'i' in an array stands for a number. you need to use the letter 'i' usually because it stands for index. you can call it anywhere inside your loop.

.push // will push something somewhere to somewhere else. The syntax is below
hi.push(bye); // this pushes a variable, bye, to a variable, hi.

. toUpperCase // makes everything that this logs to the console. upper case.
.join // this joins two things together syntax below
console.log(resultArray.join('').toUpperCase());

const fruits = ['mango', 'papaya', 'pineapple', 'apple'];
fruits.forEach (fruitIWant => console.log('I want to eat a ' + fruitIWant)); // what this does is it calls the fruits array and reassigns it in the callback function to fruitIwant. It then logs I want to eat a (mango) then etc.

.map() // returns a different array.

/ // this is the divide symbol
* // this is the multiply symbol
+ // this is the add symbol
- // this is the subtract symbol

.filter() // use this syntax to return an array, but with certain new properties.

// examples

1. const randomNumbers = [375, 200, 3.14, 7, 13, 852];

const smallNumbers = randomNumbers.filter(num => {
  return num < 250;
})

2. const favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene'];

const longFavoriteWords = favoriteWords.filter(word => {
  return word.length > 7;
})

// findIndex() this finds the element of an array that meets the criteria of what you want. Examples below.

const animals = ['hippo', 'tiger', 'lion', 'seal', 'cheetah', 'monkey', 'salamander', 'elephant'];

const foundAnimal = animals.findIndex(animal => {
  return animal === 'elephant';
});

const startsWithS = animals.findIndex(animal => {
  return animal[0] === 's' ? true : false;
});

reduce() // this is another thing that you can call on a callback function. It reduces a parameter of numbers into one larger number. You can also add another argument to this at the end of the code. Examples below.

const newNumbers = [1, 3, 5, 7];

const newSum = newNumbers.reduce((accumulator, currentValue) => {
  
      return accumulator + currentValue;
}, 10) // what all of this does is it adds 1 and 3 then 4 and 5 then 9 and 7 then 16 and 10 to get a final value of 26.

// this is a link to a bunch of iteration methods https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Iteration_methods.

other iteration methods to know

1. The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.

2. The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.

3. The copyWithin() method shallow copies part of an array to another location in the same array and returns it without modifying its length.

4. The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.

5. The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.

6. The fill() method changes all elements in an array to a static value, from a start index (default 0) to an end index (default array.length). It returns the modified array.

7. The filter() method creates a new array with all elements that pass the test implemented by the provided function. 

8. The find() method returns the value of the first element in the provided array that satisfies the provided testing function. If no values satisfies the testing function, undefined is returned.

9. The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test.

10. The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.

11. The forEach() method executes a provided function once for each array element.

12. The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator.

13. The pop() method removes the last element from an array and returns that element. This method changes the length of the array.

14. The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.

15. The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.

// advanced Global_Objects

this // calling "this" inside an object will allow you to use the elements of the same object.
// when using "this" do not use it with arrow function syntax.

// a good way to tell other coder and yourself not to mess with a method in an object is to put a "_" in front of it

get // getter methods are good when calling elements into the same object. Just put the get before you call a method.

set // set is a method that will reassaign an element in an object to something else. The syntax for it is the same as a getter. you need a parameter in a setter method.

// factory objects are very good if you want to make a lot of one type of thing in a bunch of different ways.

// another way to do a factory function is to use the const keyword and assagin it using arrow function examples below

const robotFactory = (model, mobile) => {
  return {
    model,
    mobile,
    beep() {
      console.log('Beep Boop');
    }
  }
}

// a good way to assaign an element in an object is the following: (if the object is vampire of course!)
const { residence } = vampire; 
console.log(residence); // Prints 'Transylvania'

// if you want to know the elements in one array use the following code
Object.keys(vampire);

// if you want to return the keys and values of properties in an object do the following code
Object.entries(vampire);

// if you wanted to make assign a new object but change it up a bit or not you can do the following code
const rando = Object.assign({vampireWife: true, vampireHusband: false}, vampire);

// classes

// classes are a bit like objects but they do slightly different things and their syntax is slightly different an example below
class Surgeon {
  constructor(name, department) {
    this.name = name;
    this.department = department;
  }
}

// the syntax of getter methods of classes are different from objects seeing as you dont put commas art the end of the getter methods

// you can create parent classes and child classes the syntax for these is below.































